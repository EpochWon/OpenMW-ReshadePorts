uniform_vec3 uColor {
	default = vec3(0.1, 0.0, 0.3);
	min = vec3(0.0, 0.0, 0.0);
	max = vec3(1.0, 1.0, 1.0);
	step = 0.001;
}

uniform_float uStrength {
	default = 1.0;
	min = 0.0;
	max = 1.0;
	step = 0.01;
}

uniform_bool uEnabled {
	default = true;
}

shared {
	//BSD 3-Clause License

	//Copyright (c) 2018-2019, Alexander Federwisch
	//All rights reserved.
	//
	//Redistribution and use in source and binary forms, with or without
	//modification, are permitted provided that the following conditions are met:
	//
	//* Redistributions of source code must retain the above copyright notice, this
	//list of conditions and the following disclaimer.
	//
	//* Redistributions in binary form must reproduce the above copyright notice,
	//this list of conditions and the following disclaimer in the documentation
	//and/or other materials provided with the distribution.
	//
	//* Neither the name of the copyright holder nor the names of its
	//contributors may be used to endorse or promote products derived from
	//this software without specific prior written permission.
	//
	//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
	//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
	//SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
	//OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	//OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		
		if (uEnabled) {
			vec4 col = vec4(mix(scene, 1.0 - (1.0 - scene) * (1.0 - uColor), uStrength), 1.0);
			omw_FragColor = col;
		} 
		else {
			omw_FragColor = vec4(scene, 1.0);
		}
	}
}

technique {
    description = "reshade RetroTint, https://github.com/Daodan317081/reshade-shaders";
    passes = main;
    version = "1.0";
    author = "Daodan317081, Ported by Epoch";
}