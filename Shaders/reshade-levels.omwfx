uniform_int BlackPoint {
	default = 16;
	min = 0;
	max = 255;
	description = "The black point is the new black - literally. Everything darker than this will become completely black.";
}

uniform_int WhitePoint {
	default = 235;
	min = 0;
	max = 255;
	description = "The new white point. Everything brighter than this becomes completely white";
}

uniform_bool uEnabled {
	default = true;
}

shared {
	//The MIT License (MIT)
	//
	//Copyright (c) 2014 CeeJayDK
	//
	//Permission is hereby granted, free of charge, to any person obtaining a copy
	//of this software and associated documentation files (the "Software"), to deal
	//in the Software without restriction, including without limitation the rights
	//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	//copies of the Software, and to permit persons to whom the Software is
	//furnished to do so, subject to the following conditions:
	//
	//The above copyright notice and this permission notice shall be included in all
	//copies or substantial portions of the Software.
	//
	//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	//SOFTWARE.
	
	vec3 saturate(vec3 value) {
		return clamp(value, 0.0, 1.0);
	}
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		
		float black_point_float = BlackPoint / 255.0;
		float white_point_float = WhitePoint == BlackPoint ? (255.0 / 0.00025) : (255.0 / (WhitePoint - BlackPoint)); // Avoid division by zero if the white and black point are the same
		
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		vec3 color = scene;
		color = color * white_point_float - (black_point_float * white_point_float);
		
		
		if (uEnabled) {
			vec4 col = vec4(color, 1.0);
			omw_FragColor = col;
		} 
		else {
			omw_FragColor = vec4(scene, 1.0);
		}
	}
}

technique {
    description = "reshade Levels, https://github.com/CeeJayDK/SweetFX
	Allows you to set a new black and a white level. This increases contrast, but clips any colors outside the new range to either black or white and so some details in the shadows or highlights can be lost.";
    passes = main;
    version = "1.0";
    author = "CeeJayDK, Ported by Epoch";
}