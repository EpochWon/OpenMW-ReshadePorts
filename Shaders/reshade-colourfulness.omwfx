uniform_float colourfulness {
	default = 0.4;
	min = -1.0;
	max = 2.0;
	step = 0.01;
	description = "Degree of colourfulness, 0 = neutral";
}

uniform_float lim_luma {
	default = 0.7;
	min = 0.1;
	max = 1.0;
	step = 0.01;
	description = "Lower values allows for more change near clipping";
}

uniform_bool enable_dither {
	default = false;
	description = "Enables dithering, avoids introducing banding in gradients";
	header = "Dither";
}

uniform_bool col_noise {
	default = true;
	description = "Coloured dither noise, lower subjective noise level";
}

uniform_bool uEnabled {
	default = true;
	header = "Debug";
}

shared {
	// Copyright (c) 2016-2021, bacondither
	// All rights reserved.
	//
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions
	// are met:
	// 1. Redistributions of source code must retain the above copyright
	//    notice, this list of conditions and the following disclaimer
	//    in this position and unchanged.
	// 2. Redistributions in binary form must reproduce the above copyright
	//    notice, this list of conditions and the following disclaimer in the
	//    documentation and/or other materials provided with the distribution.
	//
	// THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
	// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
	// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
	// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
	vec3 saturate(vec3 value) {
		return clamp(value, 0.0, 1.0);
	}
	
	// Sigmoid function, sign(v)*pow(pow(abs(v), -2) + pow(s, -2), 1.0/-2)
	#define soft_lim(v,s)	( (v*s)* (1 / (sqrt(s*s + v*v))) )

	// Weighted power mean, p = 0.5
	#define wpmean(a,b,w)	( pow(abs(w)*sqrt(abs(a)) + abs(1-w)*sqrt(abs(b)), vec3(2)) )

	// Max/Min RGB components
	#define maxRGB(c)	( max((c).r, max((c).g, (c).b)) )
	#define minRGB(c)	( min((c).r, min((c).g, (c).b)) )

	
	#define lumacoeff	vec3(0.2558, 0.6511, 0.0931)
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		vec3 c0 = scene;
		float luma = sqrt(dot(saturate(c0 * abs(c0)), lumacoeff));
		
		vec3 diff_luma = c0 - luma;
		vec3 c_diff = diff_luma * colourfulness;
		
		if (colourfulness > 0.0) {
			// c_diff*fudge factor, clamped to max visible range + overshoot
			vec3 rlc_diff = clamp((c_diff * 1.2) + c0, -0.0001, 1.0001) - c0;
			
			// Calc max saturation-increase without altering RGB ratios
			float poslim = (1.0002 - luma)/(abs(maxRGB(diff_luma)) + 0.0001);
			float neglim = (luma + 0.0002)/(abs(minRGB(diff_luma)) + 0.0001);
			
			vec3 diffmax = diff_luma*min(min(poslim, neglim), 32) - diff_luma;

			// Soft limit saturation diff
			c_diff = soft_lim( c_diff, max(wpmean(diffmax, rlc_diff, lim_luma), 1e-7) );
		
		}
		
		if (enable_dither == true)
		{
			// Interleaved gradient noise by Jorge Jimenez
			const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
			
			float xy_magic = omw_TexCoord.x*magic.x + omw_TexCoord.y*magic.y;
			
			float noise = (fract(magic.z*fract(xy_magic)) - 0.5)/(exp2(16) - 1);
			c_diff += col_noise == true ? vec3(-noise, noise, -noise) : vec3(0.0);
		}
		
		vec3 color = saturate(c0 + c_diff);
		
		if (uEnabled) {
			vec4 col = vec4(color, 1.0);
			omw_FragColor = col;
		} 
		else {
			omw_FragColor = vec4(scene, 1.0);
		}
	}
}

technique {
    description = "reshade Colourfulness, https://github.com/bacondither/reshade-shaders";
    passes = main;
    version = "1.0";
    author = "bacondither, Ported by Epoch";
}