uniform_float Vibrance {
	default = 0.15;
	min = 0.0;
	max = 10.0;
	step = 0.01;
	description = "Intelligently saturates (or desaturates if you use negative values) the pixels depending on their original saturation.";
}

uniform_vec3 VibranceRGBBalance {
	default = vec3(1.0, 1.0, 1.0);
	min = vec3(0.0, 0.0, 0.0);
	max = vec3(10.0, 10.0, 10.0);
	step = 0.1;
	description = "A per channel multiplier to the Vibrance strength so you can give more boost to certain colors over others.
	This is handy if you are colorblind and less sensitive to a specific color.
	You can then boost that color more than the others.";
}

uniform_bool uEnabled {
	default = true;
}

shared {
	//The MIT License (MIT)
	//
	//Copyright (c) 2014 CeeJayDK
	//
	//Permission is hereby granted, free of charge, to any person obtaining a copy
	//of this software and associated documentation files (the "Software"), to deal
	//in the Software without restriction, including without limitation the rights
	//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	//copies of the Software, and to permit persons to whom the Software is
	//furnished to do so, subject to the following conditions:
	//
	//The above copyright notice and this permission notice shall be included in all
	//copies or substantial portions of the Software.
	//
	//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	//SOFTWARE.
	
	vec3 saturate(vec3 value) {
		return clamp(value, 0.0, 1.0);
	}
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		vec3 color = scene;
		
		vec3 coefLuma = vec3(0.212656, 0.715158, 0.072186);
		
		float luma = dot(coefLuma, color);
		
		float max_color = max(color.r, max(color.g, color.b)); // find the strongest color
		float min_color = min(color.r, min(color.g, color.b)); // find the weakest color 
		
		float color_saturation = max_color - min_color;
		
		vec3 coeffVibrance = vec3(VibranceRGBBalance * Vibrance);
		color.r = mix(luma, color.r, 1.0 + (coeffVibrance.r * (1.0 - (sign(coeffVibrance.r) * color_saturation))));
		color.g = mix(luma, color.g, 1.0 + (coeffVibrance.g * (1.0 - (sign(coeffVibrance.r) * color_saturation))));
		color.b = mix(luma, color.b, 1.0 + (coeffVibrance.b * (1.0 - (sign(coeffVibrance.r) * color_saturation))));
		
		
		if (uEnabled) {
			vec4 col = vec4(color, 1.0);
			omw_FragColor = col;
		} 
		else {
			omw_FragColor = vec4(scene, 1.0);
		}
	}
}

technique {
    description = "reshade Vibrance, https://github.com/CeeJayDK/SweetFX
	Vibrance intelligently boosts the saturation of pixels so pixels that had little color get a larger boost than pixels that had a lot. This avoids oversaturation of pixels that were already very saturated.";
    passes = main;
    version = "1.0";
    author = "CeeJayDK, Ported by Epoch";
}