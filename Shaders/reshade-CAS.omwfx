uniform_float Contrast {
	default = 0.0;
	min = 0.0;
	max = 1.0;
	step = 0.01;
	display_name = "Contrast Adaptation";
	description = "Adjusts the range the shader adapts to high contrast (0 is not all the way off).  Higher values = more high contrast sharpening.";
}

uniform_float Sharpening {
	default = 1.0;
	min = 0.0;
	max = 1.0;
	step = 0.01;
	display_name = "Sharpening Intensity";
	description = "Adjusts sharpening intensity by averaging the original pixels to the sharpened result.  1.0 is the unmodified default.";
}

uniform_bool uEnabled {
	default = true;
	display_name = "Toggle Shader";
	description = "Toggle the entire effect, for comparison or debugging";
}

shared {
	// Copyright (c) 2017-2019 Advanced Micro Devices, Inc. All rights reserved.
	// -------
	// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
	// files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
	// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
	// Software is furnished to do so, subject to the following conditions:
	// -------
	// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
	// Software.
	// -------
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
	// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR
	// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
	// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
	
	vec3 saturate(vec3 value) {
		return clamp(value, 0.0, 1.0);
	}
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		
		vec3 b = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(0, -1)).rgb;
		vec3 d = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(-1, 0)).rgb;
		
		vec3 e = omw_GetLastShader(omw_TexCoord).rgb;
		vec3 f = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(1, 0)).rgb;
		
		vec3 h = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(0, 1)).rgb;
		vec3 i = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(1, 1)).rgb;
		
		vec3 g = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(-1, 1)).rgb;
		vec3 a = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(-1, -1)).rgb;
		vec3 c = textureOffset(omw_SamplerLastShader, omw_TexCoord, ivec2(1, -1)).rgb;
		
		// soft min and max
		vec3 mnRGB = min(min(min(d, e), min(f, b)), h);
		vec3 mnRGB2 = min(mnRGB, min(min(a, c), min(g, i)));
		mnRGB += mnRGB2;
		
		vec3 mxRGB = max(max(max(d, e), max(f, b)), h);
		vec3 mxRGB2 = max(mxRGB, max(max(a, c), max(g, i)));
		mxRGB += mxRGB2;
		
		// smooth minimum distance to signal limit divided by smooth max
		vec3 rcpMRGB = vec3(1.0) / mxRGB;
		vec3 ampRGB = saturate(min(mnRGB, 2.0 - mxRGB) * rcpMRGB);
		
		// shaping amount of sharpening
		ampRGB = vec3(1.0) / sqrt(ampRGB);
		
		float peak = -3.0 * Contrast + 8.0;
		vec3 wRGB = -(vec3(1.0) / (ampRGB * peak));
		
		vec3 rcpWeightRGB = vec3(1.0) / (4.0 * wRGB + 1.0);
		
		vec3 window = (b + d) + (f + h);
		vec3 outColor = saturate((window * wRGB + e) * rcpWeightRGB);
		
		if (uEnabled) {
			vec4 col = vec4(mix(e, outColor, Sharpening), 1.0);
			omw_FragColor = col;
		} 
		else {
			omw_FragColor = vec4(e, 1.0);
		}
	}
}

technique {
    description = "AMD Contrast Adaptive Sharpening, port of the ReShade version";
    passes = main;
    version = "1.0";
    author = "AMD, Initial ReShade port by SLSNe, Ported by Epoch";
    glsl_version = 130;
}
